'''
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    01: 1
    03: 1,3
    06: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?

'''

import time

def triangle_number(lim):
    number = 0
    for n in range(1, lim+1):
        number += n
    return number

def divisors(number):
    lista = []
    for i in range(1, int(number**0.5)+2):
        if (number % i) == 0:
            lista.append(i)
            lista.append(number//i)
    return set(lista)

def seeker(n):
    i = 2
    tn = triangle_number(i)
    while len(divisors(tn)) < n:
        i += 1
        tn = triangle_number(i)
    return tn

def main():
    t0 = time.time()
    # Defining the number of divisors of the first triangle number
    n = 500

    # Seeking the triangle number with the number of divisors defined 
    result = seeker(n)

    # Priting the result
    print(result)

    t1 = time.time()
    print("Time elapsed: ", t1 - t0, "sec")

main()